#!/bin/bash
# Author: Nate Browne
# Date: 14 May 2018
# Version: 2.0
# Script Name: chcr (CHeck CoRrectness)
#
# Grading script used to help grade Rick Ord CSE 30 assignments for correctness.
# Assists the grader by automating the process of looking at the files so that
# at least a small section of grading will go by a bit faster.

# Define some color constants
RED='\033[0;31m'
NC='\033[0m'

# Number of students in the directory to grade
stucount=0

# Initial showprompt boolean set to yes unless user specifies otherwise
showprompt="y"

# Usage error message
USAGE="USAGE: $0 [OPTIONS] <directory name>"
HELP_MESSAGE="-h to show help options"
NO_PROMPT="-s to speedrun the grading and not prompt to print detailed
            results"

function linesOver80 {

  for user in */; do
    cd $user
    echo "In user `pwd`"
    addend_1=`grep '.\{81,\}' *.s | wc -l`
    addend_2=`grep '.\{81,\}' *.c | wc -l`

    res=$((addend_1 + addend_2))

    if [ "$res" != "0" ]; then
      grep -n '.\{81,\}' *.s
      grep -n '.\{81,\}' *.c
    else
      echo "No lines over 80 chars"
    fi

    echo -n "Waiting to continue (q to quit): "
    read -n 1 resp

    if [ "$resp" == "q" ]; then
      return
    fi
    cd ..
    echo
  done
}
# Go to the home directory
cd ~

# Parse command line options
while getopts "sh" opt $@
do

  case $opt in

    # Handle the -h option (help flag)
    h) echo
       echo $USAGE
       printf "\n\t"
       echo "OPTIONS:"
       printf "\t"
       echo $HELP_MESSAGE
       printf "\t"
       echo $NO_PROMPT
       exit 0;;

    # Handle the muting prompt option
    s) showprompt="n";;

    # Handle invalid argument option
   \?) echo
       echo $USAGE
       printf "\n\t"
       echo "OPTIONS:"
       printf "\t"
       echo $HELP_MESSAGE
       printf "\t"
       echo $NO_PROMPT
       exit 1;;
  esac
done

# Grab last command line argument as directory to use
shift $((OPTIND - 1))
dir_name=$1

# Make sure a directory was given from the command line
if [ -z $dir_name ]; then

  echo
  echo -e "${RED}ERROR: No directory given!${NC}"
  echo $USAGE
  exit 1
fi

# Verify that the given directory is valid
if [ ! -d $dir_name ]; then

  echo
  echo -e "${RED}ERROR: directory \"$dir_name\" does not exist!${NC}"
  echo $USAGE
  exit 1
fi

# Start the script up
cd $dir_name
echo "Starting..."

# Count how many students to check
for stu in *; do

  stucount=$((stucount + 1))
done

# Initialize counter of current student
currstu=0

# call the lines over 80 script
linesOver80
echo

for stu in *
do

  # Increment current student count for printing
  currstu=$((currstu + 1))

  # Print current student
  echo "Checking student $stu... (student #$currstu of $stucount)"

  # Check if student made any mistakes
  num=`less $stu/SUMMARY.RESULTS | grep -c "FAILED"`

  # no mistakes made; prompt to print instead of automatically printing
  if [ $num -eq 0 ]; then

    echo -n "Student didn't fail any test cases!"
    echo -n " Do you still want to see summary results? (y/n/q): "
    read -n 1 response
    echo

    if [ $response == "q" ]; then

      echo "Exiting..."
      exit 0

    # Print summary results out
    elif [ $response == "y" ]; then

      echo "Showing summary results..."
      sleep 0.40
      less $stu/SUMMARY.RESULTS
    else

      # Don't show mistakes, but show milestone and EC results
      echo "Showing Milestone, r4-r10, and EC results..."
      sleep 0.40
      less $stu/SUMMARY.RESULTS | grep "Milestone"
      less $stu/SUMMARY.RESULTS | grep "r4"
      less $stu/SUMMARY.RESULTS | grep "EC"
      less $stu/SUMMARY.RESULTS | grep "Early"
    fi
  else

    # Print out summary results for failed cases
    echo "Showing summary results for failed cases, Milestone, EC, and r4..."
    sleep 0.40
    less $stu/SUMMARY.RESULTS | grep "FAILED"
    less $stu/SUMMARY.RESULTS | grep "Milestone"
    less $stu/SUMMARY.RESULTS | grep "r4"
    less $stu/SUMMARY.RESULTS | grep "EC"
      less $stu/SUMMARY.RESULTS | grep "Early"
  fi

  # Print detailed results (if needed)
  if [ $showprompt == "y" ]; then

    echo -n "Do you want to see the detailed results? (y/n/q): "
    read -n 1 response
    echo

    if [ $response == "q" ]; then

      exit 0

    elif [ $response == "y" ]; then

      echo "Showing detailed results..."
      sleep 0.40
      less $stu/DETAILED.RESULTS
    fi
  fi

  # Pause a bit to make it a little easier to read
  if [ $showprompt == "n" ]; then

    sleep 0.75
  fi
done

echo "Done!"

# Ask if we want to start up gvim
echo -n "Open the files in gview for style grading? (y/n): "
read -n 1 response
echo

if [ $response == "y" ]; then

  echo "Opening files..."

  # Check if the assignment was a pamt or not
  pamtcheck=`echo $dir_name | grep -c "pamt"`

  if [ $pamtcheck -eq 0 ]; then

    gview -p cs30x*/*.c
    gview -p cs30x*/*.s
    gview -p cs30x*/README
  else

    gview -p cs30x*/README
    gview -p cs30x*/points.csv
  fi

  echo -e "${RED}Time to do style grading/README grading!${NC}"
else

  echo -e "${RED}Time to do style grading/README grading!${NC}"
fi

echo "Exiting..."
exit 0
